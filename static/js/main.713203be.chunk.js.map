{"version":3,"sources":["components/Nav.js","components/Duplicates.js","components/DataComparer.js","components/App.js","index.js"],"names":["Nav","Menu","inverted","secondary","vertical","Item","header","as","NavLink","to","Duplicates","useState","column","setColumn","results","setResults","evaluated","setEvaluated","formatResult","map","normalizedToOriginal","line","count","push","get","length","Form","Header","Grid","Row","Column","TextArea","rows","label","value","onChange","e","target","Table","HeaderCell","Body","item","Cell","Divider","Button","primary","onClick","col","Map","lines","split","normalizedLines","normalized","trim","toLowerCase","has","set","normalize","DataComparer","colOne","setColA","colTwo","setColB","colOneUniques","setColOneUniques","colTwoUniques","setColTwoUniques","normalizeColumns","data","val","columns","readonly","colOne_normalized","colTwo_normalized","colOneSet","Set","forEach","delete","colTwoSet","join","App","Container","style","paddingTop","width","stretched","Segment","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.713203be.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => {\n\n    return (\n        <Menu inverted secondary vertical>\n            <Menu.Item header>Data Utilities</Menu.Item>\n            <Menu.Item as={NavLink} to=\"/duplicates\">Duplicates</Menu.Item>\n            <Menu.Item as={NavLink} to=\"/compare\">Compare</Menu.Item>\n        </Menu>\n    );\n}\n\nexport default Nav;","import React, { useState } from \"react\";\nimport { Button, Divider, Grid, Header, Form, Table } from \"semantic-ui-react\";\n\nconst Duplicates = () => {\n    const [column, setColumn] = useState(\"\");\n    const [results, setResults] = useState([]);\n    const [evaluated, setEvaluated] = useState(false);\n\n    const normalize = (col) => {\n        const normalizedToOriginal = new Map();\n        const lines = col.split(\"\\n\");\n        const normalizedLines = [];\n\n        for (let line of lines) {\n            const normalized = line.trim().toLowerCase();\n            normalizedLines.push(normalized);\n\n            if (!normalizedToOriginal.has(line)) {\n                normalizedToOriginal.set(normalized, line);\n            }\n        }\n\n        return [normalizedLines, normalizedToOriginal];\n    }\n\n    const evaluate = () => {\n        const [lines, normalizedToOriginal] = normalize(column);\n        const map = new Map();\n\n        for (const line of lines) {\n            const count = map.get(line) || 0;\n            map.set(line, count + 1);\n        }\n\n        formatResult(map, normalizedToOriginal);\n        setEvaluated(true);\n    }\n\n    const formatResult = (map, normalizedToOriginal) => {\n        const results = [];\n\n        for (const [line, count] of map) {\n            if (count > 1) {\n                results.push([normalizedToOriginal.get(line), count]);\n            }\n        }\n\n        if (results.length > 0) {\n            setResults(results);\n        }\n        else {\n            setResults([\"No duplicates found.\"]);\n        }\n    }\n\n    return (\n        <Form inverted>\n            <Header inverted>Find Duplicates</Header>\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column>\n                        <Form.TextArea rows=\"10\" label=\"Column\" value={column} onChange={e => setColumn(e.target.value)} />\n                    </Grid.Column>\n                </Grid.Row>\n\n                {evaluated &&\n                    <Grid.Row>\n                        <Grid.Column>\n                            <label>Duplicates</label>\n                            {\n                                results.length === 0\n                                    ? <div>No duplicates found.</div>\n                                    : <Table inverted>\n                                        <Table.Header>\n                                            <Table.Row>\n                                                <Table.HeaderCell>Item</Table.HeaderCell>\n                                                <Table.HeaderCell>Frequency</Table.HeaderCell>\n                                            </Table.Row>\n                                        </Table.Header>\n                                        <Table.Body>\n                                            {results.map(([item, count]) => <Table.Row>\n                                                <Table.Cell>{item}</Table.Cell>\n                                                <Table.Cell>{count}</Table.Cell>\n                                            </Table.Row>)}\n                                        </Table.Body>\n                                    </Table>\n                            }\n                        </Grid.Column>\n                    </Grid.Row>\n                }\n            </Grid>\n\n            <Divider />\n\n            <Button primary onClick={evaluate}>Evaluate</Button>\n        </Form>\n    );\n};\n\nexport default Duplicates;","import React, { useState } from \"react\";\nimport { Button, Divider, Form, Grid, Header } from \"semantic-ui-react\";\n\nconst DataComparer = () => {\n    const [colOne, setColA] = useState(\"\");\n    const [colTwo, setColB] = useState(\"\");\n    const [colOneUniques, setColOneUniques] = useState(\"\");\n    const [colTwoUniques, setColTwoUniques] = useState(\"\");\n    const [evaluated, setEvaluated] = useState(false);\n\n    const normalizeColumns = (data) => data.split(\"\\n\").map(val => val.trim().toLowerCase());\n\n    const evaluate = () => {\n        const colOne_normalized = normalizeColumns(colOne);\n        const colTwo_normalized = normalizeColumns(colTwo);\n\n        const colOneSet = new Set(colOne_normalized);\n        colTwo_normalized.forEach(val => colOneSet.delete(val));\n\n        const colTwoSet = new Set(colTwo_normalized);\n        colOne_normalized.forEach(val => colTwoSet.delete(val));\n\n        setColOneUniques([...colOneSet].join(\"\\n\"));\n        setColTwoUniques([...colTwoSet].join(\"\\n\"));\n        setEvaluated(true);\n    }\n\n    return (\n        <Form inverted>\n            <Header inverted>Column Compare</Header>\n            <Grid columns=\"2\">\n                <Grid.Row>\n                    <Grid.Column>\n                        <Form.TextArea label=\"Column A\" value={colOne} onChange={e => setColA(e.target.value)} />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.TextArea label=\"Column B\" value={colTwo} onChange={e => setColB(e.target.value)} />\n                    </Grid.Column>\n                </Grid.Row>\n\n                {evaluated &&\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Form.TextArea label=\"Column A Uniques\" readonly value={colOneUniques} />\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Form.TextArea label=\"Column B Uniques\" readonly value={colTwoUniques} />\n                        </Grid.Column>\n                    </Grid.Row>\n                }\n            </Grid>\n\n            <Divider />\n\n            <Button primary onClick={evaluate}>Compare</Button>\n        </Form>\n    );\n}\n\nexport default DataComparer;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\nimport Nav from \"./Nav\";\nimport Duplicates from \"./Duplicates\";\nimport DataComparer from \"./DataComparer\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Container style={{ paddingTop: \"60px\" }}>\n        <Grid>\n          <Grid.Column width={4}>\n            <Nav />\n          </Grid.Column>\n\n          <Grid.Column stretched width={12}>\n            <Segment inverted>\n              <Switch>\n                <Route exact path=\"/duplicates\">\n                  <Duplicates />\n                </Route>\n                <Route exact path=\"/compare\">\n                  <DataComparer />\n                </Route>\n              </Switch>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}